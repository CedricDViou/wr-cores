--! @file        eca_auto.vhd
--  DesignUnit   eca_auto
--! @author      Wesley W. Terpstra <w.terpstra@gsi.de>
--! @date        31/03/2016
--! @version     2.0
--! @copyright   2016 GSI Helmholtz Centre for Heavy Ion Research GmbH
--!

--! @brief AUTOGENERATED WISHBONE-SLAVE CORE FOR eca.vhd
--!
--------------------------------------------------------------------------------
--! This library is free software; you can redistribute it and/or
--! modify it under the terms of the GNU Lesser General Public
--! License as published by the Free Software Foundation; either
--! version 3 of the License, or (at your option) any later version.
--!
--! This library is distributed in the hope that it will be useful,
--! but WITHOUT ANY WARRANTY; without even the implied warranty of
--! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--! Lesser General Public License for more details.
--!
--! You should have received a copy of the GNU Lesser General Public
--! License along with this library. If not, see <http://www.gnu.org/licenses/>.
--------------------------------------------------------------------------------

-- ***********************************************************
-- ** WARNING - THIS IS AUTO-GENERATED CODE! DO NOT MODIFY! **
-- ***********************************************************
--
-- If you want to change the interface,
-- modify eca.xml and re-run 'python wbgenplus.py eca.xml' !

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wishbone_pkg.all;
use work.matrix_pkg.all;
use work.genram_pkg.all;
use work.eca_auto_pkg.all;

entity eca_auto is
generic(
   g_channels        : natural   := 1;    --
   g_search_capacity : natural   := 512;  --
   g_walker_capacity : natural   := 256   --
);
Port(
   clk_sys_i                     : std_logic;                           -- Clock input for sys domain
   rst_sys_n_i                   : std_logic;                           -- Reset input (active low) for sys domain
   channel_capacity_i            : in  std_logic_vector(16-1 downto 0); -- 
   channel_capacity_V_i          : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_capacity
   channel_deadline_hi_i         : in  std_logic_vector(32-1 downto 0); -- 
   channel_deadline_hi_V_i       : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_deadline_hi
   channel_deadline_lo_i         : in  std_logic_vector(32-1 downto 0); -- 
   channel_deadline_lo_V_i       : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_deadline_lo
   channel_event_id_hi_i         : in  std_logic_vector(32-1 downto 0); -- 
   channel_event_id_hi_V_i       : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_event_id_hi
   channel_event_id_lo_i         : in  std_logic_vector(32-1 downto 0); -- 
   channel_event_id_lo_V_i       : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_event_id_lo
   channel_executed_hi_i         : in  std_logic_vector(32-1 downto 0); -- 
   channel_executed_hi_V_i       : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_executed_hi
   channel_executed_lo_i         : in  std_logic_vector(32-1 downto 0); -- 
   channel_executed_lo_V_i       : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_executed_lo
   channel_failed_count_i        : in  std_logic_vector(32-1 downto 0); -- 
   channel_failed_count_V_i      : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_failed_count
   channel_max_num_i             : in  std_logic_vector(8-1 downto 0);  -- 
   channel_max_num_V_i           : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_max_num
   channel_mostfull_ack_i        : in  std_logic_vector(32-1 downto 0); -- 
   channel_mostfull_ack_V_i      : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_mostfull_ack
   channel_mostfull_clear_i      : in  std_logic_vector(32-1 downto 0); -- 
   channel_mostfull_clear_V_i    : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_mostfull_clear
   channel_msi_get_enable_i      : in  std_logic_vector(1-1 downto 0);  -- 
   channel_msi_get_enable_V_i    : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_msi_get_enable
   channel_msi_get_target_i      : in  std_logic_vector(32-1 downto 0); -- 
   channel_msi_get_target_V_i    : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_msi_get_target
   channel_name_i                : in  std_logic_vector(32-1 downto 0); -- 
   channel_name_V_i              : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_name
   channel_overflow_count_i      : in  std_logic_vector(32-1 downto 0); -- 
   channel_overflow_count_V_i    : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_overflow_count
   channel_param_hi_i            : in  std_logic_vector(32-1 downto 0); -- 
   channel_param_hi_V_i          : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_param_hi
   channel_param_lo_i            : in  std_logic_vector(32-1 downto 0); -- 
   channel_param_lo_V_i          : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_param_lo
   channel_tag_i                 : in  std_logic_vector(32-1 downto 0); -- 
   channel_tag_V_i               : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_tag
   channel_tef_i                 : in  std_logic_vector(32-1 downto 0); -- 
   channel_tef_V_i               : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_tef
   channel_valid_count_i         : in  std_logic_vector(32-1 downto 0); -- 
   channel_valid_count_V_i       : in  std_logic_vector(1-1 downto 0);  -- Valid flag - channel_valid_count
   search_ro_event_hi_i          : in  std_logic_vector(32-1 downto 0); -- 
   search_ro_event_hi_V_i        : in  std_logic_vector(1-1 downto 0);  -- Valid flag - search_ro_event_hi
   search_ro_event_lo_i          : in  std_logic_vector(32-1 downto 0); -- 
   search_ro_event_lo_V_i        : in  std_logic_vector(1-1 downto 0);  -- Valid flag - search_ro_event_lo
   search_ro_first_i             : in  std_logic_vector(16-1 downto 0); -- 
   search_ro_first_V_i           : in  std_logic_vector(1-1 downto 0);  -- Valid flag - search_ro_first
   slave_stall_i                 : in  std_logic_vector(1-1 downto 0);  -- flow control
   time_hi_i                     : in  std_logic_vector(32-1 downto 0); -- 
   time_hi_V_i                   : in  std_logic_vector(1-1 downto 0);  -- Valid flag - time_hi
   time_lo_i                     : in  std_logic_vector(32-1 downto 0); -- 
   time_lo_V_i                   : in  std_logic_vector(1-1 downto 0);  -- Valid flag - time_lo
   walker_ro_channel_i           : in  std_logic_vector(8-1 downto 0);  -- 
   walker_ro_channel_V_i         : in  std_logic_vector(1-1 downto 0);  -- Valid flag - walker_ro_channel
   walker_ro_flags_i             : in  std_logic_vector(4-1 downto 0);  -- 
   walker_ro_flags_V_i           : in  std_logic_vector(1-1 downto 0);  -- Valid flag - walker_ro_flags
   walker_ro_next_i              : in  std_logic_vector(16-1 downto 0); -- 
   walker_ro_next_V_i            : in  std_logic_vector(1-1 downto 0);  -- Valid flag - walker_ro_next
   walker_ro_num_i               : in  std_logic_vector(8-1 downto 0);  -- 
   walker_ro_num_V_i             : in  std_logic_vector(1-1 downto 0);  -- Valid flag - walker_ro_num
   walker_ro_offset_hi_i         : in  std_logic_vector(32-1 downto 0); -- 
   walker_ro_offset_hi_V_i       : in  std_logic_vector(1-1 downto 0);  -- Valid flag - walker_ro_offset_hi
   walker_ro_offset_lo_i         : in  std_logic_vector(32-1 downto 0); -- 
   walker_ro_offset_lo_V_i       : in  std_logic_vector(1-1 downto 0);  -- Valid flag - walker_ro_offset_lo
   walker_ro_tag_i               : in  std_logic_vector(32-1 downto 0); -- 
   walker_ro_tag_V_i             : in  std_logic_vector(1-1 downto 0);  -- Valid flag - walker_ro_tag
   channel_code_select_o         : out std_logic_vector(2-1 downto 0);  -- 
   channel_deadline_hi_RD_o      : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_deadline_hi
   channel_deadline_lo_RD_o      : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_deadline_lo
   channel_event_id_hi_RD_o      : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_event_id_hi
   channel_event_id_lo_RD_o      : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_event_id_lo
   channel_executed_hi_RD_o      : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_executed_hi
   channel_executed_lo_RD_o      : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_executed_lo
   channel_failed_count_RD_o     : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_failed_count
   channel_mostfull_ack_RD_o     : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_mostfull_ack
   channel_mostfull_clear_RD_o   : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_mostfull_clear
   channel_msi_set_enable_o      : out std_logic_vector(1-1 downto 0);  -- 
   channel_msi_set_enable_WR_o   : out std_logic_vector(1-1 downto 0);  -- Write enable flag - channel_msi_set_enable
   channel_msi_set_target_o      : out std_logic_vector(32-1 downto 0); -- 
   channel_msi_set_target_WR_o   : out std_logic_vector(1-1 downto 0);  -- Write enable flag - channel_msi_set_target
   channel_name_RD_o             : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_name
   channel_num_select_o          : out std_logic_vector(8-1 downto 0);  -- 
   channel_overflow_count_RD_o   : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_overflow_count
   channel_param_hi_RD_o         : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_param_hi
   channel_param_lo_RD_o         : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_param_lo
   channel_select_o              : out std_logic_vector(8-1 downto 0);  -- 
   channel_select_RD_o           : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_select
   channel_select_WR_o           : out std_logic_vector(1-1 downto 0);  -- Write enable flag - channel_select
   channel_tag_RD_o              : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_tag
   channel_tef_RD_o              : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_tef
   channel_valid_count_RD_o      : out std_logic_vector(1-1 downto 0);  -- Read enable flag - channel_valid_count
   flip_active_o                 : out std_logic_vector(1-1 downto 0);  -- 
   search_rw_event_hi_o          : out std_logic_vector(32-1 downto 0); -- 
   search_rw_event_lo_o          : out std_logic_vector(32-1 downto 0); -- 
   search_rw_first_o             : out std_logic_vector(16-1 downto 0); -- 
   search_select_o               : out std_logic_vector(16-1 downto 0); -- 
   search_select_RD_o            : out std_logic_vector(1-1 downto 0);  -- Read enable flag - search_select
   search_select_WR_o            : out std_logic_vector(1-1 downto 0);  -- Write enable flag - search_select
   search_write_o                : out std_logic_vector(1-1 downto 0);  -- 
   walker_rw_channel_o           : out std_logic_vector(8-1 downto 0);  -- 
   walker_rw_flags_o             : out std_logic_vector(4-1 downto 0);  -- 
   walker_rw_next_o              : out std_logic_vector(16-1 downto 0); -- 
   walker_rw_num_o               : out std_logic_vector(8-1 downto 0);  -- 
   walker_rw_offset_hi_o         : out std_logic_vector(32-1 downto 0); -- 
   walker_rw_offset_lo_o         : out std_logic_vector(32-1 downto 0); -- 
   walker_rw_tag_o               : out std_logic_vector(32-1 downto 0); -- 
   walker_select_o               : out std_logic_vector(16-1 downto 0); -- 
   walker_select_RD_o            : out std_logic_vector(1-1 downto 0);  -- Read enable flag - walker_select
   walker_select_WR_o            : out std_logic_vector(1-1 downto 0);  -- Write enable flag - walker_select
   walker_write_o                : out std_logic_vector(1-1 downto 0);  -- 
   
   slave_i                       : in  t_wishbone_slave_in;
   slave_o                       : out t_wishbone_slave_out

   
);
end eca_auto;

architecture rtl of eca_auto is

   signal s_e, r_e                     : std_logic;
   signal r_e_wait                     : std_logic;
   signal r_w                          : std_logic;
   signal r_a0, r_a1, r_p              : natural;
   signal r_d                          : std_logic_vector(32-1 downto 0);
   signal r_s                          : std_logic_vector(4-1 downto 0);
   signal s_stall                      : std_logic;
   signal s_valid                      : std_logic;
   signal r_ack                        : std_logic;
   signal r_err                        : std_logic;
   
   signal r_error                      : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Error control
   signal r_slave_stall                : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- flow control
   signal s_slave_stall_i              : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- flow control
   signal r_channels                   : std_logic_vector(8-1 downto 0)    := std_logic_vector(to_unsigned(g_channels, 8));         -- 
   signal r_search_capacity            : std_logic_vector(16-1 downto 0)   := std_logic_vector(to_unsigned(g_search_capacity, 16)); -- 
   signal r_walker_capacity            : std_logic_vector(16-1 downto 0)   := std_logic_vector(to_unsigned(g_walker_capacity, 16)); -- 
   signal r_flip_active                : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- 
   signal r_time_hi_V                  : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - time_hi
   signal s_time_hi_V_i                : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - time_hi
   signal r_time_hi                    : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_time_hi_i                  : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_time_lo_V                  : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - time_lo
   signal s_time_lo_V_i                : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - time_lo
   signal r_time_lo                    : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_time_lo_i                  : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_search_select_WR           : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Write enable flag - search_select
   signal r_search_select_RD           : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - search_select
   signal r_search_select              : std_logic_vector(16-1 downto 0)   := (others => '0');                                      -- 
   signal r_search_ro_first_V          : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - search_ro_first
   signal s_search_ro_first_V_i        : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - search_ro_first
   signal r_search_ro_first            : std_logic_vector(16-1 downto 0)   := (others => '0');                                      -- 
   signal s_search_ro_first_i          : std_logic_vector(16-1 downto 0)   := (others => '0');                                      -- 
   signal r_search_ro_event_hi_V       : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - search_ro_event_hi
   signal s_search_ro_event_hi_V_i     : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - search_ro_event_hi
   signal r_search_ro_event_hi         : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_search_ro_event_hi_i       : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_search_ro_event_lo_V       : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - search_ro_event_lo
   signal s_search_ro_event_lo_V_i     : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - search_ro_event_lo
   signal r_search_ro_event_lo         : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_search_ro_event_lo_i       : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_search_write               : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- 
   signal r_search_rw_first            : std_logic_vector(16-1 downto 0)   := (others => '0');                                      -- 
   signal r_search_rw_event_hi         : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_search_rw_event_lo         : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_walker_select_WR           : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Write enable flag - walker_select
   signal r_walker_select_RD           : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - walker_select
   signal r_walker_select              : std_logic_vector(16-1 downto 0)   := (others => '0');                                      -- 
   signal r_walker_ro_next_V           : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_next
   signal s_walker_ro_next_V_i         : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_next
   signal r_walker_ro_next             : std_logic_vector(16-1 downto 0)   := (others => '0');                                      -- 
   signal s_walker_ro_next_i           : std_logic_vector(16-1 downto 0)   := (others => '0');                                      -- 
   signal r_walker_ro_offset_hi_V      : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_offset_hi
   signal s_walker_ro_offset_hi_V_i    : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_offset_hi
   signal r_walker_ro_offset_hi        : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_walker_ro_offset_hi_i      : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_walker_ro_offset_lo_V      : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_offset_lo
   signal s_walker_ro_offset_lo_V_i    : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_offset_lo
   signal r_walker_ro_offset_lo        : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_walker_ro_offset_lo_i      : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_walker_ro_tag_V            : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_tag
   signal s_walker_ro_tag_V_i          : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_tag
   signal r_walker_ro_tag              : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_walker_ro_tag_i            : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_walker_ro_flags_V          : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_flags
   signal s_walker_ro_flags_V_i        : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_flags
   signal r_walker_ro_flags            : std_logic_vector(4-1 downto 0)    := (others => '0');                                      -- 
   signal s_walker_ro_flags_i          : std_logic_vector(4-1 downto 0)    := (others => '0');                                      -- 
   signal r_walker_ro_channel_V        : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_channel
   signal s_walker_ro_channel_V_i      : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_channel
   signal r_walker_ro_channel          : std_logic_vector(8-1 downto 0)    := (others => '0');                                      -- 
   signal s_walker_ro_channel_i        : std_logic_vector(8-1 downto 0)    := (others => '0');                                      -- 
   signal r_walker_ro_num_V            : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_num
   signal s_walker_ro_num_V_i          : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - walker_ro_num
   signal r_walker_ro_num              : std_logic_vector(8-1 downto 0)    := (others => '0');                                      -- 
   signal s_walker_ro_num_i            : std_logic_vector(8-1 downto 0)    := (others => '0');                                      -- 
   signal r_walker_write               : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- 
   signal r_walker_rw_next             : std_logic_vector(16-1 downto 0)   := (others => '0');                                      -- 
   signal r_walker_rw_offset_hi        : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_walker_rw_offset_lo        : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_walker_rw_tag              : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_walker_rw_flags            : std_logic_vector(4-1 downto 0)    := (others => '0');                                      -- 
   signal r_walker_rw_channel          : std_logic_vector(8-1 downto 0)    := (others => '0');                                      -- 
   signal r_walker_rw_num              : std_logic_vector(8-1 downto 0)    := (others => '0');                                      -- 
   signal r_channel_select_WR          : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Write enable flag - channel_select
   signal r_channel_select_RD          : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_select
   signal r_channel_select             : std_logic_vector(8-1 downto 0)    := (others => '0');                                      -- 
   signal r_channel_num_select         : std_logic_vector(8-1 downto 0)    := (others => '0');                                      -- 
   signal r_channel_code_select        : std_logic_vector(2-1 downto 0)    := (others => '0');                                      -- 
   signal r_channel_name_RD            : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_name
   signal r_channel_name_V             : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_name
   signal s_channel_name_V_i           : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_name
   signal r_channel_name               : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_name_i             : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_max_num_V          : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_max_num
   signal s_channel_max_num_V_i        : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_max_num
   signal r_channel_max_num            : std_logic_vector(8-1 downto 0)    := (others => '0');                                      -- 
   signal s_channel_max_num_i          : std_logic_vector(8-1 downto 0)    := (others => '0');                                      -- 
   signal r_channel_capacity_V         : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_capacity
   signal s_channel_capacity_V_i       : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_capacity
   signal r_channel_capacity           : std_logic_vector(16-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_capacity_i         : std_logic_vector(16-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_msi_set_enable_WR  : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Write enable flag - channel_msi_set_enable
   signal r_channel_msi_set_enable     : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- 
   signal r_channel_msi_get_enable_V   : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_msi_get_enable
   signal s_channel_msi_get_enable_V_i : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_msi_get_enable
   signal r_channel_msi_get_enable     : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- 
   signal s_channel_msi_get_enable_i   : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- 
   signal r_channel_msi_set_target_WR  : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Write enable flag - channel_msi_set_target
   signal r_channel_msi_set_target     : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_msi_get_target_V   : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_msi_get_target
   signal s_channel_msi_get_target_V_i : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_msi_get_target
   signal r_channel_msi_get_target     : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_msi_get_target_i   : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_overflow_count_RD  : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_overflow_count
   signal r_channel_overflow_count_V   : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_overflow_count
   signal s_channel_overflow_count_V_i : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_overflow_count
   signal r_channel_overflow_count     : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_overflow_count_i   : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_mostfull_ack_RD    : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_mostfull_ack
   signal r_channel_mostfull_ack_V     : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_mostfull_ack
   signal s_channel_mostfull_ack_V_i   : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_mostfull_ack
   signal r_channel_mostfull_ack       : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_mostfull_ack_i     : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_mostfull_clear_RD  : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_mostfull_clear
   signal r_channel_mostfull_clear_V   : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_mostfull_clear
   signal s_channel_mostfull_clear_V_i : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_mostfull_clear
   signal r_channel_mostfull_clear     : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_mostfull_clear_i   : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_valid_count_RD     : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_valid_count
   signal r_channel_valid_count_V      : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_valid_count
   signal s_channel_valid_count_V_i    : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_valid_count
   signal r_channel_valid_count        : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_valid_count_i      : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_failed_count_RD    : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_failed_count
   signal r_channel_failed_count_V     : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_failed_count
   signal s_channel_failed_count_V_i   : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_failed_count
   signal r_channel_failed_count       : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_failed_count_i     : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_event_id_hi_RD     : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_event_id_hi
   signal r_channel_event_id_hi_V      : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_event_id_hi
   signal s_channel_event_id_hi_V_i    : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_event_id_hi
   signal r_channel_event_id_hi        : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_event_id_hi_i      : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_event_id_lo_RD     : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_event_id_lo
   signal r_channel_event_id_lo_V      : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_event_id_lo
   signal s_channel_event_id_lo_V_i    : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_event_id_lo
   signal r_channel_event_id_lo        : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_event_id_lo_i      : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_param_hi_RD        : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_param_hi
   signal r_channel_param_hi_V         : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_param_hi
   signal s_channel_param_hi_V_i       : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_param_hi
   signal r_channel_param_hi           : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_param_hi_i         : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_param_lo_RD        : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_param_lo
   signal r_channel_param_lo_V         : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_param_lo
   signal s_channel_param_lo_V_i       : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_param_lo
   signal r_channel_param_lo           : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_param_lo_i         : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_tag_RD             : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_tag
   signal r_channel_tag_V              : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_tag
   signal s_channel_tag_V_i            : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_tag
   signal r_channel_tag                : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_tag_i              : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_tef_RD             : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_tef
   signal r_channel_tef_V              : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_tef
   signal s_channel_tef_V_i            : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_tef
   signal r_channel_tef                : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_tef_i              : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_deadline_hi_RD     : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_deadline_hi
   signal r_channel_deadline_hi_V      : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_deadline_hi
   signal s_channel_deadline_hi_V_i    : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_deadline_hi
   signal r_channel_deadline_hi        : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_deadline_hi_i      : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_deadline_lo_RD     : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_deadline_lo
   signal r_channel_deadline_lo_V      : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_deadline_lo
   signal s_channel_deadline_lo_V_i    : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_deadline_lo
   signal r_channel_deadline_lo        : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_deadline_lo_i      : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_executed_hi_RD     : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_executed_hi
   signal r_channel_executed_hi_V      : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_executed_hi
   signal s_channel_executed_hi_V_i    : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_executed_hi
   signal r_channel_executed_hi        : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_executed_hi_i      : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal r_channel_executed_lo_RD     : std_logic_vector(1-1 downto 0)    := std_logic_vector(to_unsigned(0, 1));                  -- Read enable flag - channel_executed_lo
   signal r_channel_executed_lo_V      : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_executed_lo
   signal s_channel_executed_lo_V_i    : std_logic_vector(1-1 downto 0)    := (others => '0');                                      -- Valid flag - channel_executed_lo
   signal r_channel_executed_lo        : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 
   signal s_channel_executed_lo_i      : std_logic_vector(32-1 downto 0)   := (others => '0');                                      -- 


begin

   validmux: with r_a0 select
   s_valid <= 
   s_time_hi_V_i(0)                 when c_time_hi_GET,                 -- 
   s_time_lo_V_i(0)                 when c_time_lo_GET,                 -- 
   s_search_ro_first_V_i(0)         when c_search_ro_first_GET,         -- 
   s_search_ro_event_hi_V_i(0)      when c_search_ro_event_hi_GET,      -- 
   s_search_ro_event_lo_V_i(0)      when c_search_ro_event_lo_GET,      -- 
   s_walker_ro_next_V_i(0)          when c_walker_ro_next_GET,          -- 
   s_walker_ro_offset_hi_V_i(0)     when c_walker_ro_offset_hi_GET,     -- 
   s_walker_ro_offset_lo_V_i(0)     when c_walker_ro_offset_lo_GET,     -- 
   s_walker_ro_tag_V_i(0)           when c_walker_ro_tag_GET,           -- 
   s_walker_ro_flags_V_i(0)         when c_walker_ro_flags_GET,         -- 
   s_walker_ro_channel_V_i(0)       when c_walker_ro_channel_GET,       -- 
   s_walker_ro_num_V_i(0)           when c_walker_ro_num_GET,           -- 
   s_channel_name_V_i(0)            when c_channel_name_GET,            -- 
   s_channel_max_num_V_i(0)         when c_channel_max_num_GET,         -- 
   s_channel_capacity_V_i(0)        when c_channel_capacity_GET,        -- 
   s_channel_msi_get_enable_V_i(0)  when c_channel_msi_get_enable_GET,  -- 
   s_channel_msi_get_target_V_i(0)  when c_channel_msi_get_target_GET,  -- 
   s_channel_overflow_count_V_i(0)  when c_channel_overflow_count_GET,  -- 
   s_channel_mostfull_ack_V_i(0)    when c_channel_mostfull_ack_GET,    -- 
   s_channel_mostfull_clear_V_i(0)  when c_channel_mostfull_clear_GET,  -- 
   s_channel_valid_count_V_i(0)     when c_channel_valid_count_GET,     -- 
   s_channel_failed_count_V_i(0)    when c_channel_failed_count_GET,    -- 
   s_channel_event_id_hi_V_i(0)     when c_channel_event_id_hi_GET,     -- 
   s_channel_event_id_lo_V_i(0)     when c_channel_event_id_lo_GET,     -- 
   s_channel_param_hi_V_i(0)        when c_channel_param_hi_GET,        -- 
   s_channel_param_lo_V_i(0)        when c_channel_param_lo_GET,        -- 
   s_channel_tag_V_i(0)             when c_channel_tag_GET,             -- 
   s_channel_tef_V_i(0)             when c_channel_tef_GET,             -- 
   s_channel_deadline_hi_V_i(0)     when c_channel_deadline_hi_GET,     -- 
   s_channel_deadline_lo_V_i(0)     when c_channel_deadline_lo_GET,     -- 
   s_channel_executed_hi_V_i(0)     when c_channel_executed_hi_GET,     -- 
   s_channel_executed_lo_V_i(0)     when c_channel_executed_lo_GET,     -- 
   '1'                              when others;
   
   s_stall           <= (s_e and not  s_valid) or r_slave_stall(0);
   s_e               <= r_e or r_e_wait;
   slave_o.stall     <= s_stall;
   
   s_slave_stall_i               <= slave_stall_i;
   flip_active_o                 <= r_flip_active;
   s_time_hi_V_i                 <= time_hi_V_i;
   s_time_hi_i                   <= time_hi_i;
   s_time_lo_V_i                 <= time_lo_V_i;
   s_time_lo_i                   <= time_lo_i;
   search_select_WR_o            <= r_search_select_WR;
   search_select_RD_o            <= r_search_select_RD;
   search_select_o               <= r_search_select;
   s_search_ro_first_V_i         <= search_ro_first_V_i;
   s_search_ro_first_i           <= search_ro_first_i;
   s_search_ro_event_hi_V_i      <= search_ro_event_hi_V_i;
   s_search_ro_event_hi_i        <= search_ro_event_hi_i;
   s_search_ro_event_lo_V_i      <= search_ro_event_lo_V_i;
   s_search_ro_event_lo_i        <= search_ro_event_lo_i;
   search_write_o                <= r_search_write;
   search_rw_first_o             <= r_search_rw_first;
   search_rw_event_hi_o          <= r_search_rw_event_hi;
   search_rw_event_lo_o          <= r_search_rw_event_lo;
   walker_select_WR_o            <= r_walker_select_WR;
   walker_select_RD_o            <= r_walker_select_RD;
   walker_select_o               <= r_walker_select;
   s_walker_ro_next_V_i          <= walker_ro_next_V_i;
   s_walker_ro_next_i            <= walker_ro_next_i;
   s_walker_ro_offset_hi_V_i     <= walker_ro_offset_hi_V_i;
   s_walker_ro_offset_hi_i       <= walker_ro_offset_hi_i;
   s_walker_ro_offset_lo_V_i     <= walker_ro_offset_lo_V_i;
   s_walker_ro_offset_lo_i       <= walker_ro_offset_lo_i;
   s_walker_ro_tag_V_i           <= walker_ro_tag_V_i;
   s_walker_ro_tag_i             <= walker_ro_tag_i;
   s_walker_ro_flags_V_i         <= walker_ro_flags_V_i;
   s_walker_ro_flags_i           <= walker_ro_flags_i;
   s_walker_ro_channel_V_i       <= walker_ro_channel_V_i;
   s_walker_ro_channel_i         <= walker_ro_channel_i;
   s_walker_ro_num_V_i           <= walker_ro_num_V_i;
   s_walker_ro_num_i             <= walker_ro_num_i;
   walker_write_o                <= r_walker_write;
   walker_rw_next_o              <= r_walker_rw_next;
   walker_rw_offset_hi_o         <= r_walker_rw_offset_hi;
   walker_rw_offset_lo_o         <= r_walker_rw_offset_lo;
   walker_rw_tag_o               <= r_walker_rw_tag;
   walker_rw_flags_o             <= r_walker_rw_flags;
   walker_rw_channel_o           <= r_walker_rw_channel;
   walker_rw_num_o               <= r_walker_rw_num;
   channel_select_WR_o           <= r_channel_select_WR;
   channel_select_RD_o           <= r_channel_select_RD;
   channel_select_o              <= r_channel_select;
   channel_num_select_o          <= r_channel_num_select;
   channel_code_select_o         <= r_channel_code_select;
   channel_name_RD_o             <= r_channel_name_RD;
   s_channel_name_V_i            <= channel_name_V_i;
   s_channel_name_i              <= channel_name_i;
   s_channel_max_num_V_i         <= channel_max_num_V_i;
   s_channel_max_num_i           <= channel_max_num_i;
   s_channel_capacity_V_i        <= channel_capacity_V_i;
   s_channel_capacity_i          <= channel_capacity_i;
   channel_msi_set_enable_WR_o   <= r_channel_msi_set_enable_WR;
   channel_msi_set_enable_o      <= r_channel_msi_set_enable;
   s_channel_msi_get_enable_V_i  <= channel_msi_get_enable_V_i;
   s_channel_msi_get_enable_i    <= channel_msi_get_enable_i;
   channel_msi_set_target_WR_o   <= r_channel_msi_set_target_WR;
   channel_msi_set_target_o      <= r_channel_msi_set_target;
   s_channel_msi_get_target_V_i  <= channel_msi_get_target_V_i;
   s_channel_msi_get_target_i    <= channel_msi_get_target_i;
   channel_overflow_count_RD_o   <= r_channel_overflow_count_RD;
   s_channel_overflow_count_V_i  <= channel_overflow_count_V_i;
   s_channel_overflow_count_i    <= channel_overflow_count_i;
   channel_mostfull_ack_RD_o     <= r_channel_mostfull_ack_RD;
   s_channel_mostfull_ack_V_i    <= channel_mostfull_ack_V_i;
   s_channel_mostfull_ack_i      <= channel_mostfull_ack_i;
   channel_mostfull_clear_RD_o   <= r_channel_mostfull_clear_RD;
   s_channel_mostfull_clear_V_i  <= channel_mostfull_clear_V_i;
   s_channel_mostfull_clear_i    <= channel_mostfull_clear_i;
   channel_valid_count_RD_o      <= r_channel_valid_count_RD;
   s_channel_valid_count_V_i     <= channel_valid_count_V_i;
   s_channel_valid_count_i       <= channel_valid_count_i;
   channel_failed_count_RD_o     <= r_channel_failed_count_RD;
   s_channel_failed_count_V_i    <= channel_failed_count_V_i;
   s_channel_failed_count_i      <= channel_failed_count_i;
   channel_event_id_hi_RD_o      <= r_channel_event_id_hi_RD;
   s_channel_event_id_hi_V_i     <= channel_event_id_hi_V_i;
   s_channel_event_id_hi_i       <= channel_event_id_hi_i;
   channel_event_id_lo_RD_o      <= r_channel_event_id_lo_RD;
   s_channel_event_id_lo_V_i     <= channel_event_id_lo_V_i;
   s_channel_event_id_lo_i       <= channel_event_id_lo_i;
   channel_param_hi_RD_o         <= r_channel_param_hi_RD;
   s_channel_param_hi_V_i        <= channel_param_hi_V_i;
   s_channel_param_hi_i          <= channel_param_hi_i;
   channel_param_lo_RD_o         <= r_channel_param_lo_RD;
   s_channel_param_lo_V_i        <= channel_param_lo_V_i;
   s_channel_param_lo_i          <= channel_param_lo_i;
   channel_tag_RD_o              <= r_channel_tag_RD;
   s_channel_tag_V_i             <= channel_tag_V_i;
   s_channel_tag_i               <= channel_tag_i;
   channel_tef_RD_o              <= r_channel_tef_RD;
   s_channel_tef_V_i             <= channel_tef_V_i;
   s_channel_tef_i               <= channel_tef_i;
   channel_deadline_hi_RD_o      <= r_channel_deadline_hi_RD;
   s_channel_deadline_hi_V_i     <= channel_deadline_hi_V_i;
   s_channel_deadline_hi_i       <= channel_deadline_hi_i;
   channel_deadline_lo_RD_o      <= r_channel_deadline_lo_RD;
   s_channel_deadline_lo_V_i     <= channel_deadline_lo_V_i;
   s_channel_deadline_lo_i       <= channel_deadline_lo_i;
   channel_executed_hi_RD_o      <= r_channel_executed_hi_RD;
   s_channel_executed_hi_V_i     <= channel_executed_hi_V_i;
   s_channel_executed_hi_i       <= channel_executed_hi_i;
   channel_executed_lo_RD_o      <= r_channel_executed_lo_RD;
   s_channel_executed_lo_V_i     <= channel_executed_lo_V_i;
   s_channel_executed_lo_i       <= channel_executed_lo_i;
   
   slave : process(clk_sys_i)
   begin
      if rising_edge(clk_sys_i) then
         if(rst_sys_n_i = '0') then
            r_e      <= '0';
            r_e_wait <= '0';
            r_a0     <=  0;
            r_error                       <= std_logic_vector(to_unsigned(0, 1));
            r_slave_stall                 <= std_logic_vector(to_unsigned(0, 1));
            r_channels                    <= std_logic_vector(to_unsigned(g_channels, 8));
            r_search_capacity             <= std_logic_vector(to_unsigned(g_search_capacity, 16));
            r_walker_capacity             <= std_logic_vector(to_unsigned(g_walker_capacity, 16));
            r_flip_active                 <= (others => '0');
            r_search_select_WR            <= std_logic_vector(to_unsigned(0, 1));
            r_search_select_RD            <= std_logic_vector(to_unsigned(0, 1));
            r_search_write                <= (others => '0');
            r_walker_select_WR            <= std_logic_vector(to_unsigned(0, 1));
            r_walker_select_RD            <= std_logic_vector(to_unsigned(0, 1));
            r_walker_write                <= (others => '0');
            r_channel_select_WR           <= std_logic_vector(to_unsigned(0, 1));
            r_channel_select_RD           <= std_logic_vector(to_unsigned(0, 1));
            r_channel_name_RD             <= std_logic_vector(to_unsigned(0, 1));
            r_channel_msi_set_enable_WR   <= std_logic_vector(to_unsigned(0, 1));
            r_channel_msi_set_target_WR   <= std_logic_vector(to_unsigned(0, 1));
            r_channel_overflow_count_RD   <= std_logic_vector(to_unsigned(0, 1));
            r_channel_mostfull_ack_RD     <= std_logic_vector(to_unsigned(0, 1));
            r_channel_mostfull_clear_RD   <= std_logic_vector(to_unsigned(0, 1));
            r_channel_valid_count_RD      <= std_logic_vector(to_unsigned(0, 1));
            r_channel_failed_count_RD     <= std_logic_vector(to_unsigned(0, 1));
            r_channel_event_id_hi_RD      <= std_logic_vector(to_unsigned(0, 1));
            r_channel_event_id_lo_RD      <= std_logic_vector(to_unsigned(0, 1));
            r_channel_param_hi_RD         <= std_logic_vector(to_unsigned(0, 1));
            r_channel_param_lo_RD         <= std_logic_vector(to_unsigned(0, 1));
            r_channel_tag_RD              <= std_logic_vector(to_unsigned(0, 1));
            r_channel_tef_RD              <= std_logic_vector(to_unsigned(0, 1));
            r_channel_deadline_hi_RD      <= std_logic_vector(to_unsigned(0, 1));
            r_channel_deadline_lo_RD      <= std_logic_vector(to_unsigned(0, 1));
            r_channel_executed_hi_RD      <= std_logic_vector(to_unsigned(0, 1));
            r_channel_executed_lo_RD      <= std_logic_vector(to_unsigned(0, 1));
         else
         
            -- short names
            r_d <= slave_i.dat;
            if slave_i.cyc = '1' then
            r_a0 <= to_integer(unsigned(slave_i.adr(7 downto 2)) & "00");
            end if;
            r_a1 <= r_a0;
            r_s <= slave_i.sel;
            r_w <= slave_i.we;
            r_e <= (slave_i.cyc and slave_i.stb and (not s_stall));

            if s_channel_capacity_V_i        = "1" then r_channel_capacity       <= s_channel_capacity_i; end if;       -- 
            if s_channel_deadline_hi_V_i     = "1" then r_channel_deadline_hi    <= s_channel_deadline_hi_i; end if;    -- 
            if s_channel_deadline_lo_V_i     = "1" then r_channel_deadline_lo    <= s_channel_deadline_lo_i; end if;    -- 
            if s_channel_event_id_hi_V_i     = "1" then r_channel_event_id_hi    <= s_channel_event_id_hi_i; end if;    -- 
            if s_channel_event_id_lo_V_i     = "1" then r_channel_event_id_lo    <= s_channel_event_id_lo_i; end if;    -- 
            if s_channel_executed_hi_V_i     = "1" then r_channel_executed_hi    <= s_channel_executed_hi_i; end if;    -- 
            if s_channel_executed_lo_V_i     = "1" then r_channel_executed_lo    <= s_channel_executed_lo_i; end if;    -- 
            if s_channel_failed_count_V_i    = "1" then r_channel_failed_count   <= s_channel_failed_count_i; end if;   -- 
            if s_channel_max_num_V_i         = "1" then r_channel_max_num        <= s_channel_max_num_i; end if;        -- 
            if s_channel_mostfull_ack_V_i    = "1" then r_channel_mostfull_ack   <= s_channel_mostfull_ack_i; end if;   -- 
            if s_channel_mostfull_clear_V_i  = "1" then r_channel_mostfull_clear <= s_channel_mostfull_clear_i; end if; -- 
            if s_channel_msi_get_enable_V_i  = "1" then r_channel_msi_get_enable <= s_channel_msi_get_enable_i; end if; -- 
            if s_channel_msi_get_target_V_i  = "1" then r_channel_msi_get_target <= s_channel_msi_get_target_i; end if; -- 
            if s_channel_name_V_i            = "1" then r_channel_name           <= s_channel_name_i; end if;           -- 
            if s_channel_overflow_count_V_i  = "1" then r_channel_overflow_count <= s_channel_overflow_count_i; end if; -- 
            if s_channel_param_hi_V_i        = "1" then r_channel_param_hi       <= s_channel_param_hi_i; end if;       -- 
            if s_channel_param_lo_V_i        = "1" then r_channel_param_lo       <= s_channel_param_lo_i; end if;       -- 
            if s_channel_tag_V_i             = "1" then r_channel_tag            <= s_channel_tag_i; end if;            -- 
            if s_channel_tef_V_i             = "1" then r_channel_tef            <= s_channel_tef_i; end if;            -- 
            if s_channel_valid_count_V_i     = "1" then r_channel_valid_count    <= s_channel_valid_count_i; end if;    -- 
            if s_search_ro_event_hi_V_i      = "1" then r_search_ro_event_hi     <= s_search_ro_event_hi_i; end if;     -- 
            if s_search_ro_event_lo_V_i      = "1" then r_search_ro_event_lo     <= s_search_ro_event_lo_i; end if;     -- 
            if s_search_ro_first_V_i         = "1" then r_search_ro_first        <= s_search_ro_first_i; end if;        -- 
            if s_time_hi_V_i                 = "1" then r_time_hi                <= s_time_hi_i; end if;                -- 
            if s_time_lo_V_i                 = "1" then r_time_lo                <= s_time_lo_i; end if;                -- 
            if s_walker_ro_channel_V_i       = "1" then r_walker_ro_channel      <= s_walker_ro_channel_i; end if;      -- 
            if s_walker_ro_flags_V_i         = "1" then r_walker_ro_flags        <= s_walker_ro_flags_i; end if;        -- 
            if s_walker_ro_next_V_i          = "1" then r_walker_ro_next         <= s_walker_ro_next_i; end if;         -- 
            if s_walker_ro_num_V_i           = "1" then r_walker_ro_num          <= s_walker_ro_num_i; end if;          -- 
            if s_walker_ro_offset_hi_V_i     = "1" then r_walker_ro_offset_hi    <= s_walker_ro_offset_hi_i; end if;    -- 
            if s_walker_ro_offset_lo_V_i     = "1" then r_walker_ro_offset_lo    <= s_walker_ro_offset_lo_i; end if;    -- 
            if s_walker_ro_tag_V_i           = "1" then r_walker_ro_tag          <= s_walker_ro_tag_i; end if;          -- 
            r_channel_deadline_hi_RD                                             <= (others => '0');
            r_channel_deadline_lo_RD                                             <= (others => '0');
            r_channel_event_id_hi_RD                                             <= (others => '0');
            r_channel_event_id_lo_RD                                             <= (others => '0');
            r_channel_executed_hi_RD                                             <= (others => '0');
            r_channel_executed_lo_RD                                             <= (others => '0');
            r_channel_failed_count_RD                                            <= (others => '0');
            r_channel_mostfull_ack_RD                                            <= (others => '0');
            r_channel_mostfull_clear_RD                                          <= (others => '0');
            r_channel_msi_set_enable_WR                                          <= (others => '0');
            r_channel_msi_set_target_WR                                          <= (others => '0');
            r_channel_name_RD                                                    <= (others => '0');
            r_channel_overflow_count_RD                                          <= (others => '0');
            r_channel_param_hi_RD                                                <= (others => '0');
            r_channel_param_lo_RD                                                <= (others => '0');
            r_channel_select_RD                                                  <= (others => '0');
            r_channel_select_WR                                                  <= (others => '0');
            r_channel_tag_RD                                                     <= (others => '0');
            r_channel_tef_RD                                                     <= (others => '0');
            r_channel_valid_count_RD                                             <= (others => '0');
            r_error                                                              <= (others => '0');
            r_flip_active                                                        <= (others => '0');
            r_search_select_RD                                                   <= (others => '0');
            r_search_select_WR                                                   <= (others => '0');
            r_search_write                                                       <= (others => '0');
            r_walker_select_RD                                                   <= (others => '0');
            r_walker_select_WR                                                   <= (others => '0');
            r_walker_write                                                       <= (others => '0');
            
            r_e_wait <= (r_e_wait or r_e) and not s_valid;
            
            if(r_e = '1') then
               if(r_w = '1') then
                  -- WISHBONE WRITE ACTIONS
                  case r_a0 is
                     when c_flip_active_OWR                 => r_flip_active              <= f_wb_wr(r_flip_active, r_d, r_s, "owr");              -- 
                     when c_search_select_RW                => r_search_select            <= f_wb_wr(r_search_select, r_d, r_s, "owr");            -- 
                     r_search_select_WR                                                   <= (others          => '1');
                     when c_search_write_OWR                => r_search_write             <= f_wb_wr(r_search_write, r_d, r_s, "owr");             -- 
                     when c_search_rw_first_RW              => r_search_rw_first          <= f_wb_wr(r_search_rw_first, r_d, r_s, "owr");          -- 
                     when c_search_rw_event_hi_RW           => r_search_rw_event_hi       <= f_wb_wr(r_search_rw_event_hi, r_d, r_s, "owr");       -- 
                     when c_search_rw_event_lo_RW           => r_search_rw_event_lo       <= f_wb_wr(r_search_rw_event_lo, r_d, r_s, "owr");       -- 
                     when c_walker_select_RW                => r_walker_select            <= f_wb_wr(r_walker_select, r_d, r_s, "owr");            -- 
                     r_walker_select_WR                                                   <= (others          => '1');
                     when c_walker_write_OWR                => r_walker_write             <= f_wb_wr(r_walker_write, r_d, r_s, "owr");             -- 
                     when c_walker_rw_next_RW               => r_walker_rw_next           <= f_wb_wr(r_walker_rw_next, r_d, r_s, "owr");           -- 
                     when c_walker_rw_offset_hi_RW          => r_walker_rw_offset_hi      <= f_wb_wr(r_walker_rw_offset_hi, r_d, r_s, "owr");      -- 
                     when c_walker_rw_offset_lo_RW          => r_walker_rw_offset_lo      <= f_wb_wr(r_walker_rw_offset_lo, r_d, r_s, "owr");      -- 
                     when c_walker_rw_tag_RW                => r_walker_rw_tag            <= f_wb_wr(r_walker_rw_tag, r_d, r_s, "owr");            -- 
                     when c_walker_rw_flags_RW              => r_walker_rw_flags          <= f_wb_wr(r_walker_rw_flags, r_d, r_s, "owr");          -- 
                     when c_walker_rw_channel_RW            => r_walker_rw_channel        <= f_wb_wr(r_walker_rw_channel, r_d, r_s, "owr");        -- 
                     when c_walker_rw_num_RW                => r_walker_rw_num            <= f_wb_wr(r_walker_rw_num, r_d, r_s, "owr");            -- 
                     when c_channel_select_RW               => r_channel_select           <= f_wb_wr(r_channel_select, r_d, r_s, "owr");           -- 
                     r_channel_select_WR                                                  <= (others         => '1');
                     when c_channel_num_select_RW           => r_channel_num_select       <= f_wb_wr(r_channel_num_select, r_d, r_s, "owr");       -- 
                     when c_channel_code_select_RW          => r_channel_code_select      <= f_wb_wr(r_channel_code_select, r_d, r_s, "owr");      -- 
                     when c_channel_msi_set_enable_OWR      => r_channel_msi_set_enable   <= f_wb_wr(r_channel_msi_set_enable, r_d, r_s, "owr");   -- 
                     r_channel_msi_set_enable_WR                                          <= (others => '1');
                     when c_channel_msi_set_target_OWR      => r_channel_msi_set_target   <= f_wb_wr(r_channel_msi_set_target, r_d, r_s, "owr");   -- 
                     r_channel_msi_set_target_WR                                          <= (others => '1');
                     when others                            => r_error                    <= "1";
                  end case;
               else
                  -- WISHBONE READ ACTIONS
                  case r_a0 is
                     when c_channels_GET                    => null;
                     when c_search_capacity_GET             => null;
                     when c_walker_capacity_GET             => null;
                     when c_time_hi_GET                     => null;
                     when c_time_lo_GET                     => null;
                     when c_search_select_RW                => null;
                     r_search_select_RD <= (others          => '1');
                     when c_search_ro_first_GET             => null;
                     when c_search_ro_event_hi_GET          => null;
                     when c_search_ro_event_lo_GET          => null;
                     when c_search_rw_first_RW              => null;
                     when c_search_rw_event_hi_RW           => null;
                     when c_search_rw_event_lo_RW           => null;
                     when c_walker_select_RW                => null;
                     r_walker_select_RD <= (others          => '1');
                     when c_walker_ro_next_GET              => null;
                     when c_walker_ro_offset_hi_GET         => null;
                     when c_walker_ro_offset_lo_GET         => null;
                     when c_walker_ro_tag_GET               => null;
                     when c_walker_ro_flags_GET             => null;
                     when c_walker_ro_channel_GET           => null;
                     when c_walker_ro_num_GET               => null;
                     when c_walker_rw_next_RW               => null;
                     when c_walker_rw_offset_hi_RW          => null;
                     when c_walker_rw_offset_lo_RW          => null;
                     when c_walker_rw_tag_RW                => null;
                     when c_walker_rw_flags_RW              => null;
                     when c_walker_rw_channel_RW            => null;
                     when c_walker_rw_num_RW                => null;
                     when c_channel_select_RW               => null;
                     r_channel_select_RD <= (others         => '1');
                     when c_channel_num_select_RW           => null;
                     when c_channel_code_select_RW          => null;
                     when c_channel_name_GET                => null;
                     r_channel_name_RD <= (others           => '1');
                     when c_channel_max_num_GET             => null;
                     when c_channel_capacity_GET            => null;
                     when c_channel_msi_get_enable_GET      => null;
                     when c_channel_msi_get_target_GET      => null;
                     when c_channel_overflow_count_GET      => null;
                     r_channel_overflow_count_RD <= (others => '1');
                     when c_channel_mostfull_ack_GET        => null;
                     r_channel_mostfull_ack_RD <= (others   => '1');
                     when c_channel_mostfull_clear_GET      => null;
                     r_channel_mostfull_clear_RD <= (others => '1');
                     when c_channel_valid_count_GET         => null;
                     r_channel_valid_count_RD <= (others    => '1');
                     when c_channel_failed_count_GET        => null;
                     r_channel_failed_count_RD <= (others   => '1');
                     when c_channel_event_id_hi_GET         => null;
                     r_channel_event_id_hi_RD <= (others    => '1');
                     when c_channel_event_id_lo_GET         => null;
                     r_channel_event_id_lo_RD <= (others    => '1');
                     when c_channel_param_hi_GET            => null;
                     r_channel_param_hi_RD <= (others       => '1');
                     when c_channel_param_lo_GET            => null;
                     r_channel_param_lo_RD <= (others       => '1');
                     when c_channel_tag_GET                 => null;
                     r_channel_tag_RD <= (others            => '1');
                     when c_channel_tef_GET                 => null;
                     r_channel_tef_RD <= (others            => '1');
                     when c_channel_deadline_hi_GET         => null;
                     r_channel_deadline_hi_RD <= (others    => '1');
                     when c_channel_deadline_lo_GET         => null;
                     r_channel_deadline_lo_RD <= (others    => '1');
                     when c_channel_executed_hi_GET         => null;
                     r_channel_executed_hi_RD <= (others    => '1');
                     when c_channel_executed_lo_GET         => null;
                     r_channel_executed_lo_RD <= (others    => '1');
                     when others                            => r_error <= "1";
                  end case;
               end if; -- r_w
            end if; -- r_e
            
            r_ack    <= s_e and      s_valid and not r_error(0);
            r_err    <= s_e and      s_valid and     r_error(0);
            slave_o.ack <= r_ack;
            slave_o.err <= r_err;
            
            case r_a1 is
               when c_channels_GET                 => slave_o.dat <= std_logic_vector(resize(unsigned(r_channels), slave_o.dat'length));                 -- 
               when c_search_capacity_GET          => slave_o.dat <= std_logic_vector(resize(unsigned(r_search_capacity), slave_o.dat'length));          -- 
               when c_walker_capacity_GET          => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_capacity), slave_o.dat'length));          -- 
               when c_time_hi_GET                  => slave_o.dat <= std_logic_vector(resize(unsigned(r_time_hi), slave_o.dat'length));                  -- 
               when c_time_lo_GET                  => slave_o.dat <= std_logic_vector(resize(unsigned(r_time_lo), slave_o.dat'length));                  -- 
               when c_search_select_RW             => slave_o.dat <= std_logic_vector(resize(unsigned(r_search_select), slave_o.dat'length));            -- 
               when c_search_ro_first_GET          => slave_o.dat <= std_logic_vector(resize(unsigned(r_search_ro_first), slave_o.dat'length));          -- 
               when c_search_ro_event_hi_GET       => slave_o.dat <= std_logic_vector(resize(unsigned(r_search_ro_event_hi), slave_o.dat'length));       -- 
               when c_search_ro_event_lo_GET       => slave_o.dat <= std_logic_vector(resize(unsigned(r_search_ro_event_lo), slave_o.dat'length));       -- 
               when c_search_rw_first_RW           => slave_o.dat <= std_logic_vector(resize(unsigned(r_search_rw_first), slave_o.dat'length));          -- 
               when c_search_rw_event_hi_RW        => slave_o.dat <= std_logic_vector(resize(unsigned(r_search_rw_event_hi), slave_o.dat'length));       -- 
               when c_search_rw_event_lo_RW        => slave_o.dat <= std_logic_vector(resize(unsigned(r_search_rw_event_lo), slave_o.dat'length));       -- 
               when c_walker_select_RW             => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_select), slave_o.dat'length));            -- 
               when c_walker_ro_next_GET           => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_ro_next), slave_o.dat'length));           -- 
               when c_walker_ro_offset_hi_GET      => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_ro_offset_hi), slave_o.dat'length));      -- 
               when c_walker_ro_offset_lo_GET      => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_ro_offset_lo), slave_o.dat'length));      -- 
               when c_walker_ro_tag_GET            => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_ro_tag), slave_o.dat'length));            -- 
               when c_walker_ro_flags_GET          => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_ro_flags), slave_o.dat'length));          -- 
               when c_walker_ro_channel_GET        => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_ro_channel), slave_o.dat'length));        -- 
               when c_walker_ro_num_GET            => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_ro_num), slave_o.dat'length));            -- 
               when c_walker_rw_next_RW            => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_rw_next), slave_o.dat'length));           -- 
               when c_walker_rw_offset_hi_RW       => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_rw_offset_hi), slave_o.dat'length));      -- 
               when c_walker_rw_offset_lo_RW       => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_rw_offset_lo), slave_o.dat'length));      -- 
               when c_walker_rw_tag_RW             => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_rw_tag), slave_o.dat'length));            -- 
               when c_walker_rw_flags_RW           => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_rw_flags), slave_o.dat'length));          -- 
               when c_walker_rw_channel_RW         => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_rw_channel), slave_o.dat'length));        -- 
               when c_walker_rw_num_RW             => slave_o.dat <= std_logic_vector(resize(unsigned(r_walker_rw_num), slave_o.dat'length));            -- 
               when c_channel_select_RW            => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_select), slave_o.dat'length));           -- 
               when c_channel_num_select_RW        => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_num_select), slave_o.dat'length));       -- 
               when c_channel_code_select_RW       => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_code_select), slave_o.dat'length));      -- 
               when c_channel_name_GET             => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_name), slave_o.dat'length));             -- 
               when c_channel_max_num_GET          => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_max_num), slave_o.dat'length));          -- 
               when c_channel_capacity_GET         => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_capacity), slave_o.dat'length));         -- 
               when c_channel_msi_get_enable_GET   => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_msi_get_enable), slave_o.dat'length));   -- 
               when c_channel_msi_get_target_GET   => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_msi_get_target), slave_o.dat'length));   -- 
               when c_channel_overflow_count_GET   => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_overflow_count), slave_o.dat'length));   -- 
               when c_channel_mostfull_ack_GET     => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_mostfull_ack), slave_o.dat'length));     -- 
               when c_channel_mostfull_clear_GET   => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_mostfull_clear), slave_o.dat'length));   -- 
               when c_channel_valid_count_GET      => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_valid_count), slave_o.dat'length));      -- 
               when c_channel_failed_count_GET     => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_failed_count), slave_o.dat'length));     -- 
               when c_channel_event_id_hi_GET      => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_event_id_hi), slave_o.dat'length));      -- 
               when c_channel_event_id_lo_GET      => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_event_id_lo), slave_o.dat'length));      -- 
               when c_channel_param_hi_GET         => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_param_hi), slave_o.dat'length));         -- 
               when c_channel_param_lo_GET         => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_param_lo), slave_o.dat'length));         -- 
               when c_channel_tag_GET              => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_tag), slave_o.dat'length));              -- 
               when c_channel_tef_GET              => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_tef), slave_o.dat'length));              -- 
               when c_channel_deadline_hi_GET      => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_deadline_hi), slave_o.dat'length));      -- 
               when c_channel_deadline_lo_GET      => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_deadline_lo), slave_o.dat'length));      -- 
               when c_channel_executed_hi_GET      => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_executed_hi), slave_o.dat'length));      -- 
               when c_channel_executed_lo_GET      => slave_o.dat <= std_logic_vector(resize(unsigned(r_channel_executed_lo), slave_o.dat'length));      -- 
               when others                         => slave_o.dat <= (others => 'X');
            end case;
            
         end if; -- rst
      end if; -- clk edge
   end process;

end rtl;
