---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for WR switch endpoint controller
---------------------------------------------------------------------------------------
-- File           : ep_registers_pkg.vhd
-- Author         : auto-generated by wbgen2 from ep_wishbone_controller.wb
-- Created        : Mon Aug 22 23:38:16 2011
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE ep_wishbone_controller.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

package ep_wbgen2_pkg is
  type t_ep_registers is record
    ecr_portid_o                             : std_logic_vector(4 downto 0);
    ecr_rst_cnt_o                            : std_logic;
    ecr_tx_en_o                              : std_logic;
    ecr_rx_en_o                              : std_logic;
    ecr_feat_vlan_i                          : std_logic;
    ecr_feat_dmtd_i                          : std_logic;
    ecr_feat_ptp_i                           : std_logic;
    ecr_feat_dpi_i                           : std_logic;
    tscr_en_txts_o                           : std_logic;
    tscr_en_rxts_o                           : std_logic;
    tscr_cs_start_o                          : std_logic;
    tscr_cs_done_i                           : std_logic;
    rfcr_a_runt_o                            : std_logic;
    rfcr_a_giant_o                           : std_logic;
    rfcr_a_hp_o                              : std_logic;
    rfcr_keep_crc_o                          : std_logic;
    rfcr_hpap_o                              : std_logic_vector(7 downto 0);
    rfcr_mru_o                               : std_logic_vector(13 downto 0);
    vcr0_qmode_o                             : std_logic_vector(1 downto 0);
    vcr0_fix_prio_o                          : std_logic;
    vcr0_prio_val_o                          : std_logic_vector(2 downto 0);
    vcr0_pvid_o                              : std_logic_vector(11 downto 0);
    vcr1_vid_o                               : std_logic_vector(11 downto 0);
    vcr1_vid_wr_o                            : std_logic;
    vcr1_value_o                             : std_logic;
    vcr1_value_wr_o                          : std_logic;
    pfcr0_mm_addr_o                          : std_logic_vector(5 downto 0);
    pfcr0_mm_addr_wr_o                       : std_logic;
    pfcr0_mm_write_o                         : std_logic;
    pfcr0_mm_write_wr_o                      : std_logic;
    pfcr0_enable_o                           : std_logic;
    pfcr0_mm_data_msb_o                      : std_logic_vector(23 downto 0);
    pfcr0_mm_data_msb_wr_o                   : std_logic;
    pfcr1_mm_data_lsb_o                      : std_logic_vector(11 downto 0);
    tcar_pcp_map_o                           : std_logic_vector(23 downto 0);
    fcr_rxpause_o                            : std_logic;
    fcr_txpause_o                            : std_logic;
    fcr_tx_thr_o                             : std_logic_vector(7 downto 0);
    fcr_tx_quanta_o                          : std_logic_vector(15 downto 0);
    mach_o                                   : std_logic_vector(15 downto 0);
    macl_o                                   : std_logic_vector(31 downto 0);
    dmcr_en_o                                : std_logic;
    dmcr_n_avg_o                             : std_logic_vector(11 downto 0);
    dmsr_ps_val_i                            : std_logic_vector(23 downto 0);
    dmsr_ps_rdy_o                            : std_logic;
    dmsr_ps_rdy_i                            : std_logic;
    dmsr_ps_rdy_load_o                       : std_logic;
    mdio_cr_data_o                           : std_logic_vector(15 downto 0);
    mdio_cr_data_wr_o                        : std_logic;
    mdio_cr_addr_o                           : std_logic_vector(7 downto 0);
    mdio_cr_rw_o                             : std_logic;
    mdio_asr_rdata_i                         : std_logic_vector(15 downto 0);
    mdio_asr_phyad_o                         : std_logic_vector(7 downto 0);
    mdio_asr_ready_i                         : std_logic;
    dsr_lstatus_i                            : std_logic;
    dsr_lact_o                               : std_logic;
    dsr_lact_i                               : std_logic;
    dsr_lact_load_o                          : std_logic;
    end record;
  
  constant c_ep_registers_init_value: t_ep_registers := (
    ecr_portid_o => (others => 'Z'),
    ecr_rst_cnt_o => 'Z',
    ecr_tx_en_o => 'Z',
    ecr_rx_en_o => 'Z',
    ecr_feat_vlan_i => 'Z',
    ecr_feat_dmtd_i => 'Z',
    ecr_feat_ptp_i => 'Z',
    ecr_feat_dpi_i => 'Z',
    tscr_en_txts_o => 'Z',
    tscr_en_rxts_o => 'Z',
    tscr_cs_start_o => 'Z',
    tscr_cs_done_i => 'Z',
    rfcr_a_runt_o => 'Z',
    rfcr_a_giant_o => 'Z',
    rfcr_a_hp_o => 'Z',
    rfcr_keep_crc_o => 'Z',
    rfcr_hpap_o => (others => 'Z'),
    rfcr_mru_o => (others => 'Z'),
    vcr0_qmode_o => (others => 'Z'),
    vcr0_fix_prio_o => 'Z',
    vcr0_prio_val_o => (others => 'Z'),
    vcr0_pvid_o => (others => 'Z'),
    vcr1_vid_o => (others => 'Z'),
    vcr1_vid_wr_o => 'Z',
    vcr1_value_o => 'Z',
    vcr1_value_wr_o => 'Z',
    pfcr0_mm_addr_o => (others => 'Z'),
    pfcr0_mm_addr_wr_o => 'Z',
    pfcr0_mm_write_o => 'Z',
    pfcr0_mm_write_wr_o => 'Z',
    pfcr0_enable_o => 'Z',
    pfcr0_mm_data_msb_o => (others => 'Z'),
    pfcr0_mm_data_msb_wr_o => 'Z',
    pfcr1_mm_data_lsb_o => (others => 'Z'),
    tcar_pcp_map_o => (others => 'Z'),
    fcr_rxpause_o => 'Z',
    fcr_txpause_o => 'Z',
    fcr_tx_thr_o => (others => 'Z'),
    fcr_tx_quanta_o => (others => 'Z'),
    mach_o => (others => 'Z'),
    macl_o => (others => 'Z'),
    dmcr_en_o => 'Z',
    dmcr_n_avg_o => (others => 'Z'),
    dmsr_ps_val_i => (others => 'Z'),
    dmsr_ps_rdy_o => 'Z',
    dmsr_ps_rdy_i => 'Z',
    dmsr_ps_rdy_load_o => 'Z',
    mdio_cr_data_o => (others => 'Z'),
    mdio_cr_data_wr_o => 'Z',
    mdio_cr_addr_o => (others => 'Z'),
    mdio_cr_rw_o => 'Z',
    mdio_asr_rdata_i => (others => 'Z'),
    mdio_asr_phyad_o => (others => 'Z'),
    mdio_asr_ready_i => 'Z',
    dsr_lstatus_i => 'Z',
    dsr_lact_o => 'Z',
    dsr_lact_i => 'Z',
    dsr_lact_load_o => 'Z'
  );
end package;
