---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for WB Intreface to dummy pck generator.
---------------------------------------------------------------------------------------
-- File           : wr_fec_dummy_pck_gen_if.vhd
-- Author         : auto-generated by wbgen2 from wr_fec_dummy_pck_gen_if.wb
-- Created        : Mon Jul 25 19:58:34 2011
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wr_fec_dummy_pck_gen_if.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity wr_fec_dummy_pck_gen_if is
  port (
    rst_n_i                                  : in     std_logic;
    wb_clk_i                                 : in     std_logic;
    wb_addr_i                                : in     std_logic_vector(2 downto 0);
    wb_data_i                                : in     std_logic_vector(31 downto 0);
    wb_data_o                                : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    clk_i                                    : in     std_logic;
-- Port for std_logic_vector field: 'Payload Value' in reg: 'Dummy paylaod size (bytes)'
    wr_fec_dummy_pck_gen_payload_size_o      : out    std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Increment Value' in reg: 'Paylaod increment step size (bytes)'
    wr_fec_dummy_pck_gen_increment_size_o    : out    std_logic_vector(7 downto 0);
-- Port for std_logic_vector field: 'Generate Number Value' in reg: 'Number of frames to be generated'
    wr_fec_dummy_pck_gen_gen_frame_number_o  : out    std_logic_vector(15 downto 0);
-- Port for BIT field: 'Start generation' in reg: 'Control register'
    wr_fec_dummy_pck_gen_ctrl_start_o        : out    std_logic;
-- Port for BIT field: 'Stop generation' in reg: 'Control register'
    wr_fec_dummy_pck_gen_ctrl_stop_o         : out    std_logic;
-- Port for BIT field: 'Enable FEC' in reg: 'Control register'
    wr_fec_dummy_pck_gen_ctrl_fec_o          : out    std_logic;
-- Port for BIT field: 'Continuous mode' in reg: 'Control register'
    wr_fec_dummy_pck_gen_ctrl_continuous_o   : out    std_logic;
-- Port for BIT field: 'VLAN-tagging enable' in reg: 'Control register'
    wr_fec_dummy_pck_gen_ctrl_vlan_o         : out    std_logic;
-- Port for std_logic_vector field: 'Status Register Value' in reg: 'Status register'
    wr_fec_dummy_pck_gen_status_i            : in     std_logic_vector(15 downto 0)
  );
end wr_fec_dummy_pck_gen_if;

architecture syn of wr_fec_dummy_pck_gen_if is

signal wr_fec_dummy_pck_gen_payload_size_int    : std_logic_vector(15 downto 0);
signal wr_fec_dummy_pck_gen_increment_size_int  : std_logic_vector(7 downto 0);
signal wr_fec_dummy_pck_gen_gen_frame_number_int : std_logic_vector(15 downto 0);
signal wr_fec_dummy_pck_gen_ctrl_start_int      : std_logic      ;
signal wr_fec_dummy_pck_gen_ctrl_stop_int       : std_logic      ;
signal wr_fec_dummy_pck_gen_ctrl_fec_int        : std_logic      ;
signal wr_fec_dummy_pck_gen_ctrl_continuous_int : std_logic      ;
signal wr_fec_dummy_pck_gen_ctrl_vlan_int       : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(2 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal bus_clock_int                            : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_data_i;
  bwsel_reg <= wb_sel_i;
  bus_clock_int <= wb_clk_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      wr_fec_dummy_pck_gen_payload_size_int <= "0000000000000000";
      wr_fec_dummy_pck_gen_increment_size_int <= "00000000";
      wr_fec_dummy_pck_gen_gen_frame_number_int <= "0000000000000000";
      wr_fec_dummy_pck_gen_ctrl_start_int <= '0';
      wr_fec_dummy_pck_gen_ctrl_stop_int <= '0';
      wr_fec_dummy_pck_gen_ctrl_fec_int <= '0';
      wr_fec_dummy_pck_gen_ctrl_continuous_int <= '0';
      wr_fec_dummy_pck_gen_ctrl_vlan_int <= '0';
    elsif rising_edge(bus_clock_int) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ack_in_progress <= '0';
        else
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(2 downto 0) is
          when "000" => 
            if (wb_we_i = '1') then
              wr_fec_dummy_pck_gen_payload_size_int <= wrdata_reg(15 downto 0);
            else
              rddata_reg(15 downto 0) <= wr_fec_dummy_pck_gen_payload_size_int;
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "001" => 
            if (wb_we_i = '1') then
              wr_fec_dummy_pck_gen_increment_size_int <= wrdata_reg(7 downto 0);
            else
              rddata_reg(7 downto 0) <= wr_fec_dummy_pck_gen_increment_size_int;
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010" => 
            if (wb_we_i = '1') then
              wr_fec_dummy_pck_gen_gen_frame_number_int <= wrdata_reg(15 downto 0);
            else
              rddata_reg(15 downto 0) <= wr_fec_dummy_pck_gen_gen_frame_number_int;
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011" => 
            if (wb_we_i = '1') then
              wr_fec_dummy_pck_gen_ctrl_start_int <= wrdata_reg(0);
              wr_fec_dummy_pck_gen_ctrl_stop_int <= wrdata_reg(1);
              wr_fec_dummy_pck_gen_ctrl_fec_int <= wrdata_reg(2);
              wr_fec_dummy_pck_gen_ctrl_continuous_int <= wrdata_reg(3);
              wr_fec_dummy_pck_gen_ctrl_vlan_int <= wrdata_reg(4);
            else
              rddata_reg(0) <= wr_fec_dummy_pck_gen_ctrl_start_int;
              rddata_reg(1) <= wr_fec_dummy_pck_gen_ctrl_stop_int;
              rddata_reg(2) <= wr_fec_dummy_pck_gen_ctrl_fec_int;
              rddata_reg(3) <= wr_fec_dummy_pck_gen_ctrl_continuous_int;
              rddata_reg(4) <= wr_fec_dummy_pck_gen_ctrl_vlan_int;
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(15 downto 0) <= wr_fec_dummy_pck_gen_status_i;
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_data_o <= rddata_reg;
-- Payload Value
  wr_fec_dummy_pck_gen_payload_size_o <= wr_fec_dummy_pck_gen_payload_size_int;
-- Increment Value
  wr_fec_dummy_pck_gen_increment_size_o <= wr_fec_dummy_pck_gen_increment_size_int;
-- Generate Number Value
  wr_fec_dummy_pck_gen_gen_frame_number_o <= wr_fec_dummy_pck_gen_gen_frame_number_int;
-- Start generation
  wr_fec_dummy_pck_gen_ctrl_start_o <= wr_fec_dummy_pck_gen_ctrl_start_int;
-- Stop generation
  wr_fec_dummy_pck_gen_ctrl_stop_o <= wr_fec_dummy_pck_gen_ctrl_stop_int;
-- Enable FEC
  wr_fec_dummy_pck_gen_ctrl_fec_o <= wr_fec_dummy_pck_gen_ctrl_fec_int;
-- Continuous mode
  wr_fec_dummy_pck_gen_ctrl_continuous_o <= wr_fec_dummy_pck_gen_ctrl_continuous_int;
-- VLAN-tagging enable
  wr_fec_dummy_pck_gen_ctrl_vlan_o <= wr_fec_dummy_pck_gen_ctrl_vlan_int;
-- Status Register Value
  rwaddr_reg <= wb_addr_i;
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
