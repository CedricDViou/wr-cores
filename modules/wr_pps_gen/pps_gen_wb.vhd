---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for WR Switch PPS generator and RTC
---------------------------------------------------------------------------------------
-- File           : pps_gen_wb.vhd
-- Author         : auto-generated by wbgen2 from pps_gen_wb.wb
-- Created        : Wed Jun 23 23:57:56 2021
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE pps_gen_wb.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity pps_gen_wb is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(2 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_err_o                                 : out    std_logic;
    wb_rty_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
-- Port for MONOSTABLE field: 'Reset counter' in reg: 'Control Register'
    ppsg_cr_cnt_rst_o                        : out    std_logic;
-- Port for BIT field: 'Enable counter' in reg: 'Control Register'
    ppsg_cr_cnt_en_o                         : out    std_logic;
-- Ports for BIT field: 'Adjust offset' in reg: 'Control Register'
    ppsg_cr_cnt_adj_o                        : out    std_logic;
    ppsg_cr_cnt_adj_i                        : in     std_logic;
    ppsg_cr_cnt_adj_load_o                   : out    std_logic;
-- Port for MONOSTABLE field: 'Set time' in reg: 'Control Register'
    ppsg_cr_cnt_set_o                        : out    std_logic;
-- Port for std_logic_vector field: 'PPS Pulse width' in reg: 'Control Register'
    ppsg_cr_pwidth_o                         : out    std_logic_vector(27 downto 0);
-- Port for std_logic_vector field: 'Nanosecond counter' in reg: 'Nanosecond counter register'
    ppsg_cntr_nsec_i                         : in     std_logic_vector(27 downto 0);
-- Port for std_logic_vector field: 'UTC Counter' in reg: 'UTC Counter register (least-significant part)'
    ppsg_cntr_utclo_i                        : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'UTC Counter' in reg: 'UTC Counter register (most-significant part)'
    ppsg_cntr_utchi_i                        : in     std_logic_vector(7 downto 0);
-- Ports for PASS_THROUGH field: 'Nanosecond adjustment' in reg: 'Nanosecond adjustment register'
    ppsg_adj_nsec_o                          : out    std_logic_vector(27 downto 0);
    ppsg_adj_nsec_wr_o                       : out    std_logic;
-- Ports for PASS_THROUGH field: 'UTC Counter adjustment' in reg: 'UTC Adjustment register (least-significant part)'
    ppsg_adj_utclo_o                         : out    std_logic_vector(31 downto 0);
    ppsg_adj_utclo_wr_o                      : out    std_logic;
-- Ports for PASS_THROUGH field: 'UTC Counter adjustment' in reg: 'UTC Adjustment register (most-significant part)'
    ppsg_adj_utchi_o                         : out    std_logic_vector(7 downto 0);
    ppsg_adj_utchi_wr_o                      : out    std_logic;
-- Ports for BIT field: 'Sync to external PPS input' in reg: 'External sync control register'
    ppsg_escr_sync_o                         : out    std_logic;
    ppsg_escr_sync_i                         : in     std_logic;
    ppsg_escr_sync_load_o                    : out    std_logic;
-- Port for BIT field: 'PPS unmask output' in reg: 'External sync control register'
    ppsg_escr_pps_unmask_o                   : out    std_logic;
-- Port for BIT field: 'PPS output valid' in reg: 'External sync control register'
    ppsg_escr_pps_valid_o                    : out    std_logic;
-- Port for BIT field: 'Timecode output(UTC+cycles) valid' in reg: 'External sync control register'
    ppsg_escr_tm_valid_o                     : out    std_logic;
-- Port for MONOSTABLE field: 'Set seconds counter' in reg: 'External sync control register'
    ppsg_escr_sec_set_o                      : out    std_logic;
-- Port for MONOSTABLE field: 'Set nanoseconds counter' in reg: 'External sync control register'
    ppsg_escr_nsec_set_o                     : out    std_logic
  );
end pps_gen_wb;

architecture syn of pps_gen_wb is

signal ppsg_cr_cnt_rst_dly0                     : std_logic       := '0';
signal ppsg_cr_cnt_rst_int                      : std_logic       := '0';
signal ppsg_cr_cnt_en_int                       : std_logic       := '0';
signal ppsg_cr_cnt_set_dly0                     : std_logic       := '0';
signal ppsg_cr_cnt_set_int                      : std_logic       := '0';
signal ppsg_cr_pwidth_int                       : std_logic_vector(27 downto 0) := (others => '0');
signal ppsg_escr_pps_unmask_int                 : std_logic       := '0';
signal ppsg_escr_pps_valid_int                  : std_logic       := '0';
signal ppsg_escr_tm_valid_int                   : std_logic       := '0';
signal ppsg_escr_sec_set_dly0                   : std_logic       := '0';
signal ppsg_escr_sec_set_int                    : std_logic       := '0';
signal ppsg_escr_nsec_set_dly0                  : std_logic       := '0';
signal ppsg_escr_nsec_set_int                   : std_logic       := '0';
signal ack_sreg                                 : std_logic_vector(9 downto 0) := (others => '0');
signal rddata_reg                               : std_logic_vector(31 downto 0) := (others => '0');
signal wrdata_reg                               : std_logic_vector(31 downto 0) := (others => '0');
signal bwsel_reg                                : std_logic_vector(3 downto 0) := (others => '0');
signal rwaddr_reg                               : std_logic_vector(2 downto 0) := (others => '0');
signal ack_in_progress                          : std_logic       := '0';
signal wr_int                                   : std_logic       := '0';
signal rd_int                                   : std_logic       := '0';
signal allones                                  : std_logic_vector(31 downto 0) := (others => '0');
signal allzeros                                 : std_logic_vector(31 downto 0) := (others => '0');

begin
-- Some internal signals assignments
  wrdata_reg <= wb_dat_i;
-- 
-- Main register bank access process.
  process (clk_sys_i)
  begin
    if rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ppsg_cr_cnt_rst_int <= '0';
          ppsg_cr_cnt_adj_load_o <= '0';
          ppsg_cr_cnt_set_int <= '0';
          ppsg_adj_nsec_wr_o <= '0';
          ppsg_adj_utclo_wr_o <= '0';
          ppsg_adj_utchi_wr_o <= '0';
          ppsg_escr_sync_load_o <= '0';
          ppsg_escr_sec_set_int <= '0';
          ppsg_escr_nsec_set_int <= '0';
          ack_in_progress <= '0';
        else
          ppsg_cr_cnt_adj_load_o <= '0';
          ppsg_adj_nsec_wr_o <= '0';
          ppsg_adj_utclo_wr_o <= '0';
          ppsg_adj_utchi_wr_o <= '0';
          ppsg_escr_sync_load_o <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(2 downto 0) is
          when "000" => 
            if (wb_we_i = '1') then
              ppsg_cr_cnt_rst_int <= wrdata_reg(0);
              ppsg_cr_cnt_en_int <= wrdata_reg(1);
              ppsg_cr_cnt_adj_load_o <= '1';
              ppsg_cr_cnt_set_int <= wrdata_reg(3);
              ppsg_cr_pwidth_int <= wrdata_reg(31 downto 4);
            end if;
            rddata_reg(0) <= '0';
            rddata_reg(1) <= ppsg_cr_cnt_en_int;
            rddata_reg(2) <= ppsg_cr_cnt_adj_i;
            rddata_reg(3) <= '0';
            rddata_reg(31 downto 4) <= ppsg_cr_pwidth_int;
            ack_sreg(2) <= '1';
            ack_in_progress <= '1';
          when "001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(27 downto 0) <= ppsg_cntr_nsec_i;
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= ppsg_cntr_utclo_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(7 downto 0) <= ppsg_cntr_utchi_i;
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100" => 
            if (wb_we_i = '1') then
              ppsg_adj_nsec_wr_o <= '1';
            end if;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101" => 
            if (wb_we_i = '1') then
              ppsg_adj_utclo_wr_o <= '1';
            end if;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110" => 
            if (wb_we_i = '1') then
              ppsg_adj_utchi_wr_o <= '1';
            end if;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "111" => 
            if (wb_we_i = '1') then
              ppsg_escr_sync_load_o <= '1';
              ppsg_escr_pps_unmask_int <= wrdata_reg(1);
              ppsg_escr_pps_valid_int <= wrdata_reg(2);
              ppsg_escr_tm_valid_int <= wrdata_reg(3);
              ppsg_escr_sec_set_int <= wrdata_reg(4);
              ppsg_escr_nsec_set_int <= wrdata_reg(5);
            end if;
            rddata_reg(0) <= ppsg_escr_sync_i;
            rddata_reg(1) <= ppsg_escr_pps_unmask_int;
            rddata_reg(2) <= ppsg_escr_pps_valid_int;
            rddata_reg(3) <= ppsg_escr_tm_valid_int;
            rddata_reg(4) <= '0';
            rddata_reg(5) <= '0';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(2) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- Reset counter
  process (clk_sys_i)
  begin
    if rising_edge(clk_sys_i) then
      ppsg_cr_cnt_rst_dly0 <= ppsg_cr_cnt_rst_int;
      ppsg_cr_cnt_rst_o <= ppsg_cr_cnt_rst_int and (not ppsg_cr_cnt_rst_dly0);
    end if;
  end process;
  
  
-- Enable counter
  ppsg_cr_cnt_en_o <= ppsg_cr_cnt_en_int;
-- Adjust offset
  ppsg_cr_cnt_adj_o <= wrdata_reg(2);
-- Set time
  process (clk_sys_i)
  begin
    if rising_edge(clk_sys_i) then
      ppsg_cr_cnt_set_dly0 <= ppsg_cr_cnt_set_int;
      ppsg_cr_cnt_set_o <= ppsg_cr_cnt_set_int and (not ppsg_cr_cnt_set_dly0);
    end if;
  end process;
  
  
-- PPS Pulse width
  ppsg_cr_pwidth_o <= ppsg_cr_pwidth_int;
-- Nanosecond counter
-- UTC Counter
-- UTC Counter
-- Nanosecond adjustment
-- pass-through field: Nanosecond adjustment in register: Nanosecond adjustment register
  ppsg_adj_nsec_o <= wrdata_reg(27 downto 0);
-- UTC Counter adjustment
-- pass-through field: UTC Counter adjustment in register: UTC Adjustment register (least-significant part)
  ppsg_adj_utclo_o <= wrdata_reg(31 downto 0);
-- UTC Counter adjustment
-- pass-through field: UTC Counter adjustment in register: UTC Adjustment register (most-significant part)
  ppsg_adj_utchi_o <= wrdata_reg(7 downto 0);
-- Sync to external PPS input
  ppsg_escr_sync_o <= wrdata_reg(0);
-- PPS unmask output
  ppsg_escr_pps_unmask_o <= ppsg_escr_pps_unmask_int;
-- PPS output valid
  ppsg_escr_pps_valid_o <= ppsg_escr_pps_valid_int;
-- Timecode output(UTC+cycles) valid
  ppsg_escr_tm_valid_o <= ppsg_escr_tm_valid_int;
-- Set seconds counter
  process (clk_sys_i)
  begin
    if rising_edge(clk_sys_i) then
      ppsg_escr_sec_set_dly0 <= ppsg_escr_sec_set_int;
      ppsg_escr_sec_set_o <= ppsg_escr_sec_set_int and (not ppsg_escr_sec_set_dly0);
    end if;
  end process;
  
  
-- Set nanoseconds counter
  process (clk_sys_i)
  begin
    if rising_edge(clk_sys_i) then
      ppsg_escr_nsec_set_dly0 <= ppsg_escr_nsec_set_int;
      ppsg_escr_nsec_set_o <= ppsg_escr_nsec_set_int and (not ppsg_escr_nsec_set_dly0);
    end if;
  end process;
  
  
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
  wb_err_o <= '0';
  wb_rty_o <= '0';
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
