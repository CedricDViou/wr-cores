-- -*- Mode: LUA; tab-width: 2 -*-

peripheral {
  name = "WR Transmission control and debug";
  description ="This WB registers allow to diagnose transmission and reception of data using WR streamers";
  prefix = "wr_transmission";
  hdl_entity = "wr_transmission_wb";

  reg {
    name = "Statistics status and ctrl register";
    prefix = "SSCR1";

    field {
      name = "Reset statistics";
      prefix = "RST_STATS";
      description = "Writing 1 reset counters, latency acc/max/min. This reset is timestamped";
      type = MONOSTABLE;
    };
    field {
      name = "Reset tx seq id";
      prefix = "RST_SEQ_ID";
      description = "Writing 1 reset sequence ID of transmitted frames";
      type = MONOSTABLE;
    };
    field {
      name = "Latency accumulator overflow";
      prefix = "RX_LATENCY_ACC_OVERFLOW";
      description = "Latency accumulator overflow - the lateny accumulator value is invalid";
      type = BIT;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY; 
    };
   
    field {
      name = "Reset timestamp cycles";
      prefix = "RST_TS_CYC";
      description = "Timestamp of the last reset of stats (RST_STAT) -- count of clock cycles";
      type = SLV;
      size = 28;
      align = 4;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY; 
    };
  };
  reg {
    name = "Statistics status and ctrl register";
    prefix = "SSCR2";
    field {
      name = "Reset timestamp 32 LSB of TAI";
      prefix = "RST_TS_TAI_LSB";
      description = "Timestamp of the last reset of stats (RST_STAT)  -- LSB 32 bits of TAI";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY; 
    };
  };
  reg {
    name = "Tx statistics";
    prefix = "TX_STAT";
    field {
      name = "WR Streamer frame sent count";
      description = "Number of sent wr streamer frames since reset";
      prefix = "TX_SENT_CNT";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
      };
  };
  reg {
    name = "Rx statistics";
    prefix = "RX_STAT1";
    field {
      name = "WR Streamer frame received count";
      description = "Number of received wr streamer frames since reset";
      prefix = "RX_RCVD_CNT";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
      };
  };
  reg {
    name = "Rx statistics";
    prefix = "RX_STAT2";
    field {
      name = "WR Streamer frame loss count";
      description = "Number of lost wr streamer frames since reset";
      prefix = "RX_LOSS_CNT";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
      };
  };
  reg {
    name = "Rx statistics";
    prefix = "RX_STAT3";
    field {
      name = "WR Streamer frame latency";
      description = "Maximum latency of received frames since reset";
      prefix = "RX_LATENCY_MAX";
      type = SLV;
      size = 28;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
      };
  };
  reg {
    name = "Rx statistics";
    prefix = "RX_STAT4";
    field {
      name = "WR Streamer frame latency";
      description = "Minimum latency of received frames since reset";
      prefix = "RX_LATENCY_MIN";
      type = SLV;
      size = 28;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
      };
  };
  reg {
    name = "Rx statistics";
    prefix = "RX_STAT5";
    field {
      name = "WR Streamer frame latency";
      description = "Accumulated latency (LSB) of received frames since reset";
      prefix = "RX_LATENCY_ACC_LSB";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
      };
  };
  reg {
    name = "Rx statistics";
    prefix = "RX_STAT6";
    field {
      name = "WR Streamer frame latency";
      description = "Accumulated latency (MSB) of received frames since reset";
      prefix = "RX_LATENCY_ACC_MSB";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
      };
  };
  reg {
    name = "Rx statistics";
    prefix = "RX_STAT7";
    field {
      name = "WR Streamer frame latency counter";
      description = "Counter of the accumulated frequency (so avg can be calculated in SW) since reset";
      prefix = "RX_LATENCY_ACC_CNT";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
      };
  };
  reg {
    name = "Rx statistics";
    prefix = "RX_STAT8";
    field {
      name = "WR Streamer block loss count";
      description = "Number of indications that one or more blocks in a frame were lost (probably CRC\
                     error) since reset";
      prefix = "RX_LOST_BLOCK_CNT";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
      };
  };
  reg {
    name = "DBG Control register";
    prefix = "DBG_CTRL";
    description = "This register is meant to control simple debugging of transmitted or received data.\
    It allows to sniff a 32-bit word at a configurable offset from received or transmitted data.";
    field {
      name = "Debug Tx (0) or Rx (1)";
      prefix = "MUX";
      type = BIT;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
    field {
      name = "Debug Start byte";
      prefix = "START_BYTE";
      description ="The offset, in bytes, from which the 32-bit word is read.";
      type = SLV;
      align =8;
      size = 8;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
   };
  reg {
    name = "DBG Data";
    prefix = "DBG_DATA";
    field {
      name = "Debug content";
      size = 32;
      type =SLV;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
   };
  reg {
    name = "Test value";
    prefix = "DUMMY";
    field {
      name = "DUMMY value to read";
      prefix = "DUMMY";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
      };
  };
};
